var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [BEA]\nFilter = t -> isa(t, Module)","category":"page"},{"location":"api/#BEA.BEA","page":"API","title":"BEA.BEA","text":"BEA\n\nA client for the U.S. Bureau of Economic Analysis API.\n\n\n\n\n\n","category":"module"},{"location":"api/#Constants","page":"API","title":"Constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"BEA.BEA_API_BASEURL","category":"page"},{"location":"api/#BEA.BEA_API_BASEURL","page":"API","title":"BEA.BEA_API_BASEURL","text":"BEA_API_BASEURL -> URI\n\nBase url for the BEA API.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [BEA]\nFilter = t -> isa(t, DataType)","category":"page"},{"location":"api/#BEA.AMNE","page":"API","title":"BEA.AMNE","text":"AMNE(\n    directionofinvestment::AbstractString,\n    allaffiliates::Bool,\n    nonbankaffiliatesonly::Bool,\n    classification::AbstractString,\n    year::Union{AbstractString, Integer, AbstractVector{<:Integer}};\n    seriesid::Union{AbstractString, Integer, AbstractVector{<:Integer}} = \"ALL\",\n    country::Union{AbstractString, Integer, AbstractVector{<:Integer}} = \"ALL\",\n    industry::Union{AbstractString, AbstractVector{<:AbstractString}} = \"ALL\",\n    state::AbstractString = \"ALL\",\n    getfootnotes::Bool = false\n    ) -> AMNE\n\nActivities of Multinational Enterprises (AMNE) — operations and finances of U. S. parent enterprises and their foreign affiliates and U. S. affiliates of foreign MNEs.\n\nExamples\n\njulia> query = AMNE(\"Outward\", false, false, \"CountryByIndustry\", 2011:2012, seriesid = 4:5, country = 202)\nAMNE(\"Outward\", \"0\", \"0\", \"4,5\", \"CountryByIndustry\", \"2011,2012\", \"202\", \"ALL\", \"ALL\", \"No\")\n\njulia> query = AMNE(\"Inward\", false, false, \"Country\", 2011, seriesid = 8, industry = \"0000\")\nAMNE(\"Inward\", \"0\", \"0\", \"8\", \"Country\", \"2011\", \"ALL\", \"0000\", \"ALL\", \"No\")\n\n\n\n\n\n","category":"type"},{"location":"api/#BEA.DirectInvestment","page":"API","title":"BEA.DirectInvestment","text":"DirectInvestment(\n    directionofinvestment::AbstractString,\n    classification::AbstractString,\n    year::Union{AbstractString, Integer, AbstractVector{<:Integer}};\n    country::Union{AbstractString, Integer, AbstractVector{<:Integer}} = \"ALL\",\n    industry::Union{AbstractString, AbstractVector{<:AbstractString}} = \"ALL\",\n    seriesid::Union{AbstractString, Integer, AbstractVector{<:Integer}} = \"ALL\",\n    getfootnotes::Bool = false\n    ) -> DirectInvestment\n\nDirect Investment (DI) — income and financial transactions in direct investment that underlie the U. S. balance of payments statistics, and direct investment positions that underlie the U. S. international investment positions.\n\nExamples\n\njulia> query = DirectInvestment(\"Outward\", \"Country\", 2011:2012, country = [650, 699])\nDirectInvestment(\"Outward\", \"ALL\", \"Country\", \"2011,2012\", \"650,699\", \"ALL\", \"No\")\n\njulia> query = DirectInvestment(\"Inward\", \"CountryByIndustry\", 2010:2013, country = 308, industry = \"3000\")\nDirectInvestment(\"Inward\", \"ALL\", \"CountryByIndustry\", \"2010,2011,2012,2013\", \"308\", \"3000\", \"No\")\n\n\n\n\n\n","category":"type"},{"location":"api/#BEA.FixedAssets","page":"API","title":"BEA.FixedAssets","text":"FixedAssets(\n    tablename::AbstractString,\n    year::Union{AbstractString, Integer, AbstractVector{<:Integer}}\n    ) -> FixedAssets\n\nThis dataset contains data from the standard set of Fixed Assets tables as published online.\n\nExamples\n\njulia> query = FixedAssets(\"FAAt201\", \"ALL\")\nFixedAssets(\"FAAt201\", \"ALL\")\n\njulia> query = FixedAssets(\"FAAt405\", 2015:2016)\nFixedAssets(\"FAAt405\", \"2015,2016\")\n\n\n\n\n\n","category":"type"},{"location":"api/#BEA.GDPbyIndustry","page":"API","title":"BEA.GDPbyIndustry","text":"GDPbyIndustry(\n    tableid::Union{AbstractString, Integer},\n    frequency::Union{Char, AbstractVector{<:Char}},\n    year::Union{AbstractString, Integer, AbstractVector{<:Integer}},\n    industry::Union{AbstractString, AbstractVector{<:AbstractString}}\n    ) -> GDPbyIndustry\n\nThe gross domestic product by industry data are contained within a dataset called GDPbyIndustry. BEA's industry accounts are used extensively by policymakers and businesses to understand industry interactions, productivity trends, and the changing structure of the U. S. economy. The GDP-by-industry dataset includes data in both current and chained (real) dollars. The dataset contains estimates for value added, gross output, intermediate inputs, KLEMS and employment statistics.\n\nExamples\n\njulia> query = GDPbyIndustry(1, 'A', 2011:2012, \"ALL\")\nGDPbyIndustry(\"1\", \"A\", \"2011,2012\", \"ALL\")\n\njulia> query = GDPbyIndustry(11, ['A', 'Q'], 2010, \"11\")\nGDPbyIndustry(\"11\", \"A,Q\", \"2010\", \"11\")\n\n\n\n\n\n","category":"type"},{"location":"api/#BEA.IIP","page":"API","title":"BEA.IIP","text":"IIP(;\n    typeofinvestment::Union{AbstractVector{<:AbstractString}, AbstractString} = \"ALL\",\n    component::Union{AbstractVector{<:AbstractString}, AbstractString} = \"ALL\",\n    frequency::Union{Char, AbstractVector{<:Char}} = ['A', 'N'],\n    year::Union{AbstractString, Integer, AbstractVector{<:Integer}} = \"ALL\"\n    ) -> IPP\n\nThis dataset contains data on the U. S. international investment position. BEA's international investment position accounts include the end of period value of accumulated stocks of U. S. financial assets and liabilities.\n\nExamples\n\njulia> query = IIP(typeofinvestment = \"FinAssetsExclFinDeriv\", component = \"ChgPosPrice\", frequency = 'A')\nIIP(\"FinAssetsExclFinDeriv\", \"ChgPosPrice\", \"A\", \"ALL\")\n\njulia> query = IIP(typeofinvestment = \"FinLiabsFoa\", component = \"Pos\", frequency = 'N', year = 2013)\nIIP(\"FinLiabsFoa\", \"Pos\", \"QNSA\", \"2013\")\n\n\n\n\n\n","category":"type"},{"location":"api/#BEA.ITA","page":"API","title":"BEA.ITA","text":"ITA(\n    indicator::Union{AbstractVector{<:AbstractString}, AbstractString} = \"ALL\",\n    areaorcountry::Union{AbstractVector{<:AbstractString}, AbstractString} = \"ALL\",\n    frequency::Union{Char, AbstractVector{<:Char}} = ['A', 'S', 'N'],\n    year::Union{AbstractString, Integer, AbstractVector{<:Integer}} = \"ALL\"\n    ) -> ITA\n\nInternational Transactions data on U.S. international transactions. BEA's international transactions (balance of payments) accounts include all transactions between U. S. and foreign residents.\n\nExamples\n\njulia> query = ITA(indicator = \"BalGds\", areaorcountry = \"China\", frequency = 'A', year = 2011:2012)\nITA(\"BalGds\", \"China\", \"A\", \"2011,2012\")\n\njulia> query = ITA(indicator = \"PfInvAssets\", areaorcountry = \"AllCountries\", frequency = 'N', year = 2013)\nITA(\"PfInvAssets\", \"AllCountries\", \"QNSA\", \"2013\")\n\n\n\n\n\n","category":"type"},{"location":"api/#BEA.InputOutput","page":"API","title":"BEA.InputOutput","text":"InputOutput(\n    tableid::Union{Integer, AbstractVector{<:Integer}},\n    year::Union{AbstractString, Integer, AbstractVector{<:Integer}}\n    ) -> InputOutput\n\nThe input-output accounts provide a detailed view of the interrelationships between U.S. producers and users. The Input‐Output dataset contains Make Tables, Use Tables, and Direct and Total Requirements tables.y. The input-output accounts provide a detailed view of the interrelationships between U.S. producers and users. The Input‐Output dataset contains Make Tables, Use Tables, and Direct and Total Requirements tables.\n\nExamples\n\njulia> query = InputOutput(56, 2010:2013)\nInputOutput(\"56\", \"2010,2011,2012,2013\")\n\njulia> query = InputOutput(56:57, 2007)\nInputOutput(\"56,57\", \"2007\")\n\n\n\n\n\n","category":"type"},{"location":"api/#BEA.IntlServSTA","page":"API","title":"BEA.IntlServSTA","text":"IntlServSTA(;\n    channel::Union{AbstractString, AbstractVector{<:AbstractString}} = \"ALL\",\n    destination::Union{AbstractString, AbstractVector{<:AbstractString}} = \"ALL\",\n    industry::Union{AbstractString, AbstractVector{<:AbstractString}} = \"ALL\",\n    areaorcountry::Union{AbstractString, AbstractVector{<:AbstractString}} = \"AllCountries\",\n    year::Union{AbstractString, Integer, AbstractVector{<:Integer}} = \"All\"\n    ) -> IntlServSTA\n\nThis dataset contains annual data on International Services Supplied Through Affiliates.\n\nExamples\n\njulia> query = IntlServSTA(channel = \"Mofas\", destination = \"AllForeign\", industry = \"RetailTrade\", year = 2015:2016)\nIntlServSTA(\"Mofas\", \"AllForeign\", \"RetailTrade\", \"AllCountries\", \"2015,2016\")\n\n\n\n\n\n","category":"type"},{"location":"api/#BEA.IntlServTrade","page":"API","title":"BEA.IntlServTrade","text":"IntlServTrade(;\n    typeofservice::Union{AbstractString, AbstractVector{<:AbstractString}} = \"ALL\",\n    tradedirection::Union{AbstractString, AbstractVector{<:AbstractString}} = \"ALL\",\n    affiliation::Union{AbstractString, AbstractVector{<:AbstractString}} = \"ALL\",\n    areaorcountry::Union{AbstractString, AbstractVector{<:AbstractString}} = \"AllCountries\",\n    year::Union{AbstractString, Integer, AbstractVector{<:Integer}} = \"All\"\n    ) -> IntlServTrade\n\nThis dataset contains annual data on U.S. international trade in services.\n\nExamples\n\njulia> query = IntlServTrade(typeofservice = \"AllTypesOfService\", tradedirection = \"Imports\", areaorcountry = \"Germany\", year = 2017:2018)\nIntlServTrade(\"AllTypesOfService\", \"Imports\", \"ALL\", \"Germany\", \"2017,2018\")\n\njulia> query = IntlServTrade(typeofservice = \"Telecom\", tradedirection = \"Exports\", affiliation = \"UsParents\")\nIntlServTrade(\"Telecom\", \"Exports\", \"UsParents\", \"AllCountries\", \"ALL\")\n\n\n\n\n\n","category":"type"},{"location":"api/#BEA.NIPA","page":"API","title":"BEA.NIPA","text":"NIPA(\n    tablename::AbstractString,\n    frequency::Union{Frequency, AbstractVector{Frequency}},\n    year::Union{AbstractString, Integer, AbstractVector{<:Integer}}\n    ) -> NIPA\n\nThis dataset contains data from the National Income and Product Accounts (NIPA) which include measures of the value and composition of U.S.production and the incomes generated in producing it.\n\nExamples\n\njulia> query = NIPA(\"T10101\", ['A', 'Q'], \"ALL\")\nNIPA(\"T10101\", \"A,Q\", \"ALL\")\n\n\njulia> query = NIPA(\"T20600\", 'M', 2015:2016)\nNIPA(\"T20600\", \"M\", \"2015,2016\")\n\n\n\n\n\n\n","category":"type"},{"location":"api/#BEA.NIUnderlyingDetail","page":"API","title":"BEA.NIUnderlyingDetail","text":"NIUnderlyingDetail(\n    tablename::AbstractString,\n    frequency::Union{Frequency, AbstractVector{Frequency}},\n    year::Union{AbstractString, Integer, AbstractVector{<:Integer}}\n    ) -> NIUnderlyingDetail\n\nThis dataset contains underlying detail data from the National Income and Product Accounts (NIPA) which include measures of the value and composition of U.S.production and the incomes generated in producing it.\n\nExamples\n\njulia> query = NIUnderlyingDetail(\"U20305\", ['A', 'Q', 'M'], \"ALL\")\nNIUnderlyingDetail(\"U20305\", \"A,M,Q\", \"ALL\")\n\njulia> query = NIUnderlyingDetail(\"U70205S\", 'M', 2015:2016)\nNIUnderlyingDetail(\"U70205S\", \"M\", \"2015,2016\")\n\n\n\n\n\n","category":"type"},{"location":"api/#BEA.Regional","page":"API","title":"BEA.Regional","text":"Regional(\n    tablename::AbstractString,\n    linecode::Union{AbstractString, Integer},\n    geofips::Union{AbstractString, AbstractVector{<:AbstractString}},\n    year::Union{AbstractString, Integer, AbstractVector{<:Union{<:AbstractString, Integer}}} = \"LAST5\"\n    ) -> Regional\n\nThe Regional dataset contains income and employment estimates from the Regional Economic Accounts by state, county, and metropolitan area\n\nExamples\n\njulia> query = Regional(\"CAINC1\", 1, \"County\", 2017:2018)\nRegional(\"CAINC1\", \"1\", \"County\", \"2017,2018\")\n\njulia> query = Regional(\"SAGDP9N\", 2, \"STATE\", \"ALL\")\nRegional(\"SAGDP9N\", \"2\", \"STATE\", \"ALL\")\n\n\n\n\n\n","category":"type"},{"location":"api/#BEA.UnderlyingGDPbyIndustry","page":"API","title":"BEA.UnderlyingGDPbyIndustry","text":"UnderlyingGDPbyIndustry(\n    tableid::Union{AbstractString, Integer, AbstractVector{<:Integer}},\n    industry::Union{AbstractString, Integer, AbstractVector{<:Integer}},\n    year::Union{AbstractString, Integer, AbstractVector{<:Integer}},\n    frequency::Union{Char, AbstractVector{<:Char}} = 'A'\n    ) -> UnderlyingGDPbyIndustry\n\nThe underlying GDP-by-industry dataset includes data in both current and chained (real) dollars. The dataset contains estimates for value added, gross output, and intermediate input statistics. This dataset is structurally similar to the GDPbyIndustry dataset (Appendix F), but contains additional industry detail.\n\nExamples\n\njulia> query = UnderlyingGDPbyIndustry(210, \"ALL\", 2017:2019)\nUnderlyingGDPbyIndustry(\"210\", \"A\", \"2017,2018,2019\", \"ALL\")\n\njulia> query = UnderlyingGDPbyIndustry(\"ALL\", 11, 2017)\nUnderlyingGDPbyIndustry(\"ALL\", \"A\", \"2017\", \"11\")\n\n\n\n\n\n","category":"type"},{"location":"api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [BEA]\nFilter = t -> isa(t, Function)","category":"page"},{"location":"api/#BEA.bea_api_data-Tuple{AbstractString, BEA.BEA_API_Datasets}","page":"API","title":"BEA.bea_api_data","text":"bea_api_data(\n    BEA_token::AbstractString,\n    query::BEA_API_Datasets\n    ) -> DataFrame\n\nReturn data from a query.\n\nExamples\n\njulia> query = FixedAssets(\"FAAt201\", \"ALL\")\nFixedAssets(\"FAAt201\", \"ALL\")\n\njulia> bea_api_data(BEA_token, query)\n10094×10 DataFrame\n   Row │ TableName  SeriesCode    LineNumber  LineDescription       TimePeriod  METRIC_NAME      CL_UNIT  UNIT_MULT  D ⋯\n       │ String     String        String      String                String      String           String   String     S ⋯\n───────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n     1 │ FAAt201    k1ptotl1es00  1           Private fixed assets  1925        Current Dollars  Level    6          2 ⋯\n     2 │ FAAt201    k1ptotl1es00  1           Private fixed assets  1926        Current Dollars  Level    6          2\n     3 │ FAAt201    k1ptotl1es00  1           Private fixed assets  1927        Current Dollars  Level    6          2\n     4 │ FAAt201    k1ptotl1es00  1           Private fixed assets  1928        Current Dollars  Level    6          2\n     5 │ FAAt201    k1ptotl1es00  1           Private fixed assets  1929        Current Dollars  Level    6          2 ⋯\n     6 │ FAAt201    k1ptotl1es00  1           Private fixed assets  1930        Current Dollars  Level    6          2\n     7 │ FAAt201    k1ptotl1es00  1           Private fixed assets  1931        Current Dollars  Level    6          2\n     8 │ FAAt201    k1ptotl1es00  1           Private fixed assets  1932        Current Dollars  Level    6          1\n     9 │ FAAt201    k1ptotl1es00  1           Private fixed assets  1933        Current Dollars  Level    6          1 ⋯\n    10 │ FAAt201    k1ptotl1es00  1           Private fixed assets  1934        Current Dollars  Level    6          1\n    11 │ FAAt201    k1ptotl1es00  1           Private fixed assets  1935        Current Dollars  Level    6          1\n   ⋮   │     ⋮           ⋮            ⋮                ⋮                ⋮              ⋮            ⋮         ⋮        ⋱\n 10085 │ FAAt201    k1ntotl1ae50  103         Other                 2013        Current Dollars  Level    6          2\n 10086 │ FAAt201    k1ntotl1ae50  103         Other                 2014        Current Dollars  Level    6          2 ⋯\n 10087 │ FAAt201    k1ntotl1ae50  103         Other                 2015        Current Dollars  Level    6          2\n 10088 │ FAAt201    k1ntotl1ae50  103         Other                 2016        Current Dollars  Level    6          2\n 10089 │ FAAt201    k1ntotl1ae50  103         Other                 2017        Current Dollars  Level    6          2\n 10090 │ FAAt201    k1ntotl1ae50  103         Other                 2018        Current Dollars  Level    6          2 ⋯\n 10091 │ FAAt201    k1ntotl1ae50  103         Other                 2019        Current Dollars  Level    6          3\n 10092 │ FAAt201    k1ntotl1ae50  103         Other                 2020        Current Dollars  Level    6          3\n 10093 │ FAAt201    k1ntotl1ae50  103         Other                 2021        Current Dollars  Level    6          3\n 10094 │ FAAt201    k1ntotl1ae50  103         Other                 2022        Current Dollars  Level    6          3 ⋯\n                                                                                        2 columns and 10073 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"api/#BEA.bea_api_datasets-Tuple{AbstractString}","page":"API","title":"BEA.bea_api_datasets","text":"bea_api_datasets(BEA_token::AbstractString) -> DataFrame\n\nRetrieves datasets currently available.\n\nExamples\n\njulia> bea_api_datasets(BEA_token)\n13×2 DataFrame\n Row │ DatasetName              DatasetDescription\n     │ String                   String\n─────┼────────────────────────────────────────────────────────────\n   1 │ NIPA                     Standard NIPA tables\n   2 │ NIUnderlyingDetail       Standard NI underlying detail ta…\n   3 │ MNE                      Multinational Enterprises\n   4 │ FixedAssets              Standard Fixed Assets tables\n   5 │ ITA                      International Transactions Accou…\n   6 │ IIP                      International Investment Position\n   7 │ InputOutput              Input-Output Data\n   8 │ IntlServTrade            International Services Trade\n   9 │ IntlServSTA              International Services Supplied …\n  10 │ GDPbyIndustry            GDP by Industry\n  11 │ Regional                 Regional data sets\n  12 │ UnderlyingGDPbyIndustry  Underlying GDP by Industry\n  13 │ APIDatasetMetaData       Metadata about other API datasets\n\n\n\n\n\n\n","category":"method"},{"location":"api/#BEA.bea_api_parameters-Tuple{AbstractString, AbstractString}","page":"API","title":"BEA.bea_api_parameters","text":"bea_api_parameters(\n    BEA_token::AbstractString,\n    dataset::AbstractString\n    ) -> DataFrame\n\nRetrieves a list of the datasets currently offered.\n\nExamples\n\njulia> bea_api_parameters(BEA_token, \"NIPA\")\n5×7 DataFrame\n Row │ ParameterName  ParameterDescription               ParameterDataType  ParameterIsRequiredFlag  ParameterDefaultV ⋯\n     │ String         String                             String             Bool                     String?           ⋯\n─────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ Frequency      A - Annual, Q-Quarterly, M-Month…  string                                true  missing           ⋯\n   2 │ ShowMillions   A flag indicating that million-d…  string                               false  N\n   3 │ TableID        The standard NIPA table identifi…  integer                              false  missing\n   4 │ TableName      The new NIPA table identifier      string                               false  missing\n   5 │ Year           List of year(s) of data to retri…  integer                               true  missing           ⋯\n                                                                                                       3 columns omitted\n\n\n\n\n\n","category":"method"},{"location":"api/#BEA.bea_api_parametervalues-Tuple{AbstractString, AbstractString, AbstractString}","page":"API","title":"BEA.bea_api_parametervalues","text":"bea_api_parametervalues(\n    BEA_token::AbstractString,\n    DatasetName::AbstractString,\n    ParameterName::AbstractString;\n    kwargs...) -> DataFrame\n\nRetrieves a list of the valid values for a particular parameter.\n\nExamples\n\njulia> bea_api_parametervalues(BEA_token, \"Regional\", \"TableName\")\n94×2 DataFrame\n Row │ Key         Desc\n     │ String      String\n─────┼───────────────────────────────────────────────\n   1 │ CAEMP25N    Total full-time and part-time em…\n   2 │ CAEMP25S    Total full-time and part-time em…\n   3 │ CAGDP1      County and MSA gross domestic pr…\n   4 │ CAGDP11     Contributions to percent change …\n   5 │ CAGDP2      Gross domestic product (GDP) by …\n   6 │ CAGDP8      Chain-type quantity indexes for …\n   7 │ CAGDP9      Real GDP by county and metropoli…\n   8 │ CAINC1      County and MSA personal income s…\n   9 │ CAINC30     Economic profile\n  10 │ CAINC35     Personal current transfer receip…\n  11 │ CAINC4      Personal income and employment b…\n  ⋮  │     ⋮                       ⋮\n  85 │ SQINC5H     Personal income by major compone…\n  86 │ SQINC5N     Personal income by major compone…\n  87 │ SQINC5S     Personal income by major compone…\n  88 │ SQINC6N     Compensation of employees by NAI…\n  89 │ SQINC6S     Compensation of employees by SIC…\n  90 │ SQINC7H     Wages and salaries by industry (…\n  91 │ SQINC7N     Wages and salaries by NAICS indu…\n  92 │ SQINC7S     Wages and salaries by SIC indust…\n  93 │ TASUMMARY1  Summary of GDP and components fo…\n  94 │ TASUMMARY2  Summary of real GDP and componen…\n                                      73 rows omitted\n\njulia> bea_api_parametervalues(BEA_token, \"MNE\", \"Country\")\n259×2 DataFrame\n Row │ key     desc\n     │ String  String\n─────┼──────────────────────────────\n   1 │ all      all\n   2 │ 000      all Countries Total\n   3 │ 600     Afghanistan\n   4 │ 499     Africa\n   5 │ 350     Albania\n   6 │ 400     Algeria\n   7 │ 300     Andorra\n   8 │ 401     Angola\n   9 │ 272     Anguilla\n  10 │ 273     Antigua and Barbuda\n  11 │ 200     Argentina\n  ⋮  │   ⋮              ⋮\n 250 │ 653     Vietnam\n 251 │ 440     Western Sahara\n 252 │ 637     Western Samoa\n 253 │ 514     Yemen\n 254 │ 500     Yemen (Aden)\n 255 │ 514     Yemen (Sanaa)\n 256 │ 328     Yugoslavia\n 257 │ 408     Zaire\n 258 │ 448     Zambia\n 259 │ 431     Zimbabwe\n                    238 rows omitted\n\njulia> bea_api_parametervalues(BEA_token, \"Regional\", \"LineCode\", TableName = \"SQINC7N\", Year = 2020)\n29×2 DataFrame\n Row │ Key     Desc\n     │ String  String\n─────┼───────────────────────────────────────────\n   1 │ 100     [SQINC7N] Private wages and sala…\n   2 │ 1000    [SQINC7N] Private nonfarm wages …\n   3 │ 1100    [SQINC7N] Private nonfarm wages …\n   4 │ 1200    [SQINC7N] Private nonfarm wages …\n   5 │ 1300    [SQINC7N] Private nonfarm wages …\n   6 │ 1400    [SQINC7N] Private nonfarm wages …\n   7 │ 1500    [SQINC7N] Private nonfarm wages …\n   8 │ 1600    [SQINC7N] Private nonfarm wages …\n   9 │ 1700    [SQINC7N] Private nonfarm wages …\n  10 │ 1800    [SQINC7N] Private nonfarm wages …\n  11 │ 1900    [SQINC7N] Private nonfarm wages …\n  ⋮  │   ⋮                     ⋮\n  20 │ 500     [SQINC7N] Private nonfarm wages …\n  21 │ 510     [SQINC7N] Private nonfarm wages …\n  22 │ 530     [SQINC7N] Private nonfarm wages …\n  23 │ 600     [SQINC7N] Private nonfarm wages …\n  24 │ 700     [SQINC7N] Private nonfarm wages …\n  25 │ 800     [SQINC7N] Private nonfarm wages …\n  26 │ 81      [SQINC7N] Farm wages and salarie…\n  27 │ 82      [SQINC7N] Nonfarm wages and sala…\n  28 │ 90      [SQINC7N] Private nonfarm wages …\n  29 │ 900     [SQINC7N] Private nonfarm wages …\n                                   8 rows omitted\n\n\n\n\n\n","category":"method"},{"location":"manual/#Example-Pipeline","page":"Example Pipeline","title":"Example Pipeline","text":"","category":"section"},{"location":"manual/#Setup","page":"Example Pipeline","title":"Setup","text":"","category":"section"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"We first load the module and assign the UserID (API token) to a variable.","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"using BEA, TidierData\nconst BEA_token = ENV[\"API_BEA_TOKEN\"];\nnothing","category":"page"},{"location":"manual/#Datasets","page":"Example Pipeline","title":"Datasets","text":"","category":"section"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"After obtaining the UserID for access to the API, one usually starts by looking at what datasets are available.","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"We can do this using bea_api_datasets.","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"datasets = bea_api_datasets(BEA_token)","category":"page"},{"location":"manual/#Parameters-for-FixedAssets","page":"Example Pipeline","title":"Parameters for FixedAssets","text":"","category":"section"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"Let's look at some information for the FixedAssets dataset.","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"We need to lookup which parameters are needed to access that data.","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"parameters = bea_api_parameters(BEA_token, \"FixedAssets\")","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"The basic information is also available through the documentation for the query struct.","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"@doc FixedAssets","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"It takes a tablename and year. We can check which tablenames are valid using the following method.","category":"page"},{"location":"manual/#Finding-the-parameter-values","page":"Example Pipeline","title":"Finding the parameter values","text":"","category":"section"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"faa_tbls = bea_api_parametervalues(\n    BEA_token,\n    \"FixedAssets\",\n    \"tablename\",\n    )\nfirst(faa_tbls, 6)","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"If we wanted to check whether some value is valid for some parameter conditional on other parameters, we can pass the conditional parameters/values as keyword arguments (examples in the API section).","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"Say we want to get the investment on software in the private sector (line 78 in the Fixed Assets table 2.7).","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"@filter(faa_tbls, contains(Description, \"Table 2.7\"))","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"We now know the tablename for the table of interest.","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"note: Note\nOne difference from the API documentation is that for quarterly not seasonally adjusted the package uses N and for quarterly seasonally adjusted it uses S.","category":"page"},{"location":"manual/#Defining-a-query","page":"Example Pipeline","title":"Defining a query","text":"","category":"section"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"query = FixedAssets(\"FAAt207\", 2019:2020)","category":"page"},{"location":"manual/#Getting-the-data","page":"Example Pipeline","title":"Getting the data","text":"","category":"section"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"faa_tbl27_19_20 = bea_api_data(BEA_token, query)\nfirst(faa_tbl27_19_20, 6)","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"Let us now get the estimates for investment in private software.","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"software = @filter(faa_tbl27_19_20, LineNumber == \"78\")","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"@select(\n    software,\n    series = SeriesCode,\n    year = as_integer(TimePeriod),\n    DataValue = as_integer(replace(DataValue, \",\" => \"\")) * 10^as_integer(UNIT_MULT)\n)","category":"page"},{"location":"manual/","page":"Example Pipeline","title":"Example Pipeline","text":"tip: Tip\nWhen working with quarterly and monthly data, you can use parse_bea_freq to parse them into annual, quarterly, or monthly series.","category":"page"},{"location":"#BEA.jl","page":"BEA.jl","title":"BEA.jl","text":"","category":"section"},{"location":"","page":"BEA.jl","title":"BEA.jl","text":"A client for the U.S. Bureau of Economic Analysis API.","category":"page"},{"location":"","page":"BEA.jl","title":"BEA.jl","text":"Official documentation at BEA API docs including how to request a UserID to access the API.","category":"page"}]
}
